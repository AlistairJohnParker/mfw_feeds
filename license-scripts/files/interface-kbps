#!/usr/bin/env python3
"""
interface-kbps gets the download/upload rate for the specified interface
"""

# pylint: disable=global-statement
# pylint: disable=broad-except

import sys
import getopt
import json
import collections

opts = None

class Options():
    """Options parses the command line arguments"""

    def __init__(self):
        self.settings_filename = '/etc/config/current.json'
        self.licenses_filename = '/etc/config/licenses.json'
        self.device = None
        self.direction = None
        self.default_kbps = None
        self.settings = None
        self.licenses = None

    def set_settings_filename(self, arg):
        """Set filename argument"""
        self.settings_filename = arg

    def set_licenses_filename(self, arg):
        """Set filename argument"""
        self.licenses_filename = arg

    def parse_args(self):
        """Parse command line arguments"""
        handlers = {
            '-f': self.set_settings_filename,
            '-l': self.set_licenses_filename,
        }

        try:
            (optlist, args) = getopt.getopt(sys.argv[1:], 'f:l:')
            for opt in optlist:
                handlers[opt[0]](opt[1])
            if len(args) != 3:
                print("Missing required arguments")
                print_usage(1)
            self.device = args[0]
            self.direction = args[1]
            self.default_kbps = args[2]
            if self.direction != "up" and self.direction != "down":
                print("Invalid direction: %s" % self.direction)
                print_usage(1)
            return
        except getopt.GetoptError as exc:
            print(exc)
            print_usage(1)

def cleanup(code):
    """Cleanup and exit with specified code"""
    global opts
    print(opts.default_kbps)
    exit(code)

def print_usage(exit_code):
    """Print usage"""
    sys.stderr.write("""\
%s Usage: %s <device> <up/down> <default>
  optional args:
    -f <file>   : settings filename (default: /etc/config/current.json)
    -l <file>   : licenses filename (default: /etc/config/licenses.json)
""" % (sys.argv[0], sys.argv[0]))
    exit(exit_code)

def read_settings():
    """
    Read and parse the settings file
    """
    global opts
    try:
        settings_file = open(opts.settings_filename, 'r')
        settings_data = settings_file.read()
        settings_file.close()
        opts.settings = json.loads(settings_data, object_pairs_hook=collections.OrderedDict)
    except IOError as exc:
        print("Unable to read settings file.", exc, file=sys.stderr, flush=True)
        cleanup(1)

def read_licenses():
    """
    Read and parse the licenses file
    """
    global opts
    try:
        licenses_file = open(opts.licenses_filename, 'r')
        licenses_data = licenses_file.read()
        licenses_file.close()
        opts.licenses = json.loads(licenses_data, object_pairs_hook=collections.OrderedDict)
    except IOError as exc:
        print("Unable to read licenses file.", exc, file=sys.stderr, flush=True)
        cleanup(1)

def find_interface(settings, device):
    """
    find the interface settings for specified device
    """
    if settings.get("network") is None:
        print("Missing network settings.", file=sys.stderr, flush=True)
        cleanup(1)
    if settings.get("network").get("interfaces") is None:
        print("Missing interface settings.", file=sys.stderr, flush=True)
        cleanup(1)
    for intf in settings.get("network").get("interfaces"):
        if intf.get("device") == device:
            return intf
    return None


def get_kbps(intf, direction, default_kbps):
    """
    get the kbps for the specified interface
    """
    if direction == "up":
        speed = intf.get('uploadKbps')
    else:
        speed = intf.get('downloadKbps')
    if speed is None:
        return default_kbps
    return speed

def get_entitlement_speed(licenses):
    """
    get the max entitlement
    """
    liclist = licenses.get("list")
    if liclist is None:
        print("Failed to parse licenses", file=sys.stderr, flush=True)
        cleanup(1)
    try:
        for lic in liclist:
            if lic.get("name") == "untangle-node-throughput":
                return lic.get("seats")*1024
    except Exception as exc:
        print("Unable to parse licenses.", exc, file=sys.stderr, flush=True)
    return None

def main():
    """main"""
    global opts
    opts = Options()
    opts.parse_args()

    read_settings()
    read_licenses()

    intf = find_interface(opts.settings, opts.device)
    if intf is None:
        print("Failed to find interface. (device=%s)" % opts.device, file=sys.stderr, flush=True)
        cleanup(1)

    speed = get_kbps(intf, opts.direction, opts.default_kbps)
    entitlement = get_entitlement_speed(opts.licenses)

    print(speed)
    print(entitlement)

main()
